#compdef denote-tasks

# Zsh completion for denote-tasks

# Helper function to get task IDs
_denote_tasks_get_task_ids() {
    local -a ids
    ids=(${(f)"$(denote-tasks completion task-ids 2>/dev/null)"})
    echo "$ids"
}

# Helper function to get project IDs
_denote_tasks_get_project_ids() {
    local -a projects
    projects=(${(f)"$(denote-tasks completion project-ids 2>/dev/null)"})
    echo "$projects"
}

# Helper function to get areas
_denote_tasks_get_areas() {
    local -a areas
    areas=(${(f)"$(denote-tasks completion areas 2>/dev/null)"})
    echo "$areas"
}

# Helper function to get tags
_denote_tasks_get_tags() {
    local -a tags
    tags=(${(f)"$(denote-tasks completion tags 2>/dev/null)"})
    echo "$tags"
}

_denote-tasks() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    # Global options available everywhere
    local -a global_options=(
        '--config[Use specific config file]:config file:_files'
        '--dir[Override notes directory]:directory:_directories'
        '--json[Output in JSON format]'
        '--no-color[Disable color output]'
        '(-q --quiet)'{-q,--quiet}'[Minimal output]'
        '--area[Filter by area]:area:->areas'
        '(-t --tui)'{-t,--tui}'[Launch TUI interface]'
        '--help[Show help]'
        '--version[Show version]'
    )

    _arguments -C \
        '1: :->command' \
        '2: :->subcommand' \
        '*:: :->args' \
        $global_options

    case $state in
        command)
            local -a commands=(
                # Task commands (implicit)
                'new:Create a new task'
                'list:List tasks'
                'update:Update task metadata'
                'done:Mark tasks as done'
                'log:Add log entry to task'
                'edit:Edit task file'
                'delete:Delete tasks'
                # Other commands
                'project:Manage projects'
                'completion:Generate shell completions'
            )
            _describe -t commands 'command' commands
            ;;

        subcommand)
            case $words[1] in
                project)
                    local -a project_commands=(
                        'new:Create a new project'
                        'list:List projects'
                        'update:Update project metadata'
                        'tasks:Show tasks for a project'
                    )
                    _describe -t project-commands 'project command' project_commands
                    ;;
                completion)
                    local -a completion_types=(
                        'task-ids:List task IDs'
                        'project-ids:List project IDs'
                        'areas:List areas'
                        'tags:List tags'
                    )
                    _describe -t completion-types 'completion type' completion_types
                    ;;
            esac
            ;;

        args)
            case $words[1] in
                # Task commands (implicit)
                new)
                    _arguments \
                        '(-p --priority)'{-p,--priority}'[Set priority]:priority:(p1 p2 p3)' \
                        '--due[Set due date]:due date:' \
                        '--area[Set area]:area:->areas' \
                        '--project[Set project ID]:project:->projects' \
                        '--estimate[Set time estimate]:estimate:(1 2 3 5 8 13)' \
                        '--tags[Set tags (comma-separated)]:tags:' \
                        '*:title:'
                    ;;
                list)
                    _arguments \
                        '(-a --all)'{-a,--all}'[Show all tasks]' \
                        '--area[Filter by area]:area:->areas' \
                        '--status[Filter by status]:status:(open done paused delegated dropped)' \
                        '(-p --priority)'{-p,--priority}'[Filter by priority]:priority:(p1 p2 p3)' \
                        '--project[Filter by project]:project:->projects' \
                        '--overdue[Show only overdue tasks]' \
                        '--soon[Show tasks due soon]' \
                        '(-s --sort)'{-s,--sort}'[Sort by]:sort:(modified priority due created)' \
                        '(-r --reverse)'{-r,--reverse}'[Reverse sort order]'
                    ;;
                update)
                    _arguments \
                        '(-p --priority)'{-p,--priority}'[Set priority]:priority:(p1 p2 p3)' \
                        '--due[Set due date]:due date:' \
                        '--area[Set area]:area:->areas' \
                        '--project[Set project ID]:project:->projects' \
                        '--estimate[Set time estimate]:estimate:(1 2 3 5 8 13)' \
                        '--status[Set status]:status:(open done paused delegated dropped)' \
                        '*:task ID:->task_ids'
                    ;;
                done|delete)
                    _arguments \
                        '*:task ID:->task_ids'
                    ;;
                log)
                    _arguments \
                        '1:task ID:->task_ids' \
                        '*:log message:'
                    ;;
                edit)
                    _arguments \
                        '1:task ID:->task_ids'
                    ;;
                # Project commands
                project)
                    case $words[2] in
                        new)
                            _arguments \
                                '(-p --priority)'{-p,--priority}'[Set priority]:priority:(p1 p2 p3)' \
                                '--due[Set due date]:due date:' \
                                '--area[Set area]:area:->areas' \
                                '--start[Set start date]:start date:' \
                                '--tags[Set tags (comma-separated)]:tags:' \
                                '*:title:'
                            ;;
                        list)
                            _arguments \
                                '(-a --all)'{-a,--all}'[Show all projects]' \
                                '--area[Filter by area]:area:->areas' \
                                '--status[Filter by status]:status:(active completed paused cancelled)' \
                                '(-p --priority)'{-p,--priority}'[Filter by priority]:priority:(p1 p2 p3)' \
                                '(-s --sort)'{-s,--sort}'[Sort by]:sort:(modified priority due created title)' \
                                '(-r --reverse)'{-r,--reverse}'[Reverse sort order]'
                            ;;
                        update)
                            _arguments \
                                '(-p --priority)'{-p,--priority}'[Set priority]:priority:(p1 p2 p3)' \
                                '--due[Set due date]:due date:' \
                                '--area[Set area]:area:->areas' \
                                '--status[Set status]:status:(active completed paused cancelled)' \
                                '*:project ID:->project_ids'
                            ;;
                        tasks)
                            _arguments \
                                '1:project ID:->project_ids'
                            ;;
                    esac
                    ;;
            esac
            ;;
    esac

    # Handle dynamic completions
    case $state in
        areas)
            local -a areas
            areas=($(_denote_tasks_get_areas))
            _describe -t areas 'area' areas
            ;;
        projects)
            local -a projects
            projects=($(_denote_tasks_get_project_ids))
            _describe -t projects 'project' projects
            ;;
        task_ids)
            local -a task_ids
            task_ids=($(_denote_tasks_get_task_ids))
            _describe -t task-ids 'task ID' task_ids
            ;;
        project_ids)
            local -a project_ids
            project_ids=($(_denote_tasks_get_project_ids))
            _describe -t project-ids 'project ID' project_ids
            ;;
    esac
}

_denote-tasks "$@"